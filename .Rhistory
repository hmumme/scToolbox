# inputs:
# x -- vector of x1, x2, x3
# outputs:
# ll -- log likelihood that the vector came from set B
logLikB = function(x) {
l1 = GaussLogLik(x[1], m = 1, s = 1) # find likelihood of x1
l2 = GaussLogLik(x[2], m = 7, s = 4) # find likelihood of x2
l3 = BernoulliLogLik(x[3], p = 0.8) # find likelihood of x3
ll = l1 + l2 + l3 # find log(p(x|B))
return(ll)
}
# function LogLikC
# formula: log(p(x|C)) = sum(log(p(xi|C)))
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# ll -- log likelihood that the vector came from set C
logLikC = function(x) {
l1 = GaussLogLik(x[1], m = 1, s = 1) # find likelihood of x1
l2 = GaussLogLik(x[2], m = 1, s = 1) # find likelihood of x2
l3 = BernoulliLogLik(x[3], p = 0.2) # find likelihood of x3
ll = l1 + l2 + l3 # find log(p(x|C))
return(ll)
}
logLikC(c(1,1,1))
logLikC(c(1,0,1))
logLikC(c(1,0,0))
x = c(7.2, 1, 1) # example of x
logLikA(x)
logLikB(x)
logLikC(x)
print(paste0("Log Likelihoods of x = [", x[1], " ", x[2], " ", x[3], "] coming from set A, B, C = [", llA, " ", llB, " ", llC, "]"))
# function LogLikA
# formula: log(p(x|A)) = sum(log(p(xi|A)))
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# ll -- log likelihood that the vector came from set A
logLikA = function(x) {
l1 = GaussLogLik(x[1], m = 7, s = 4) # find likelihood of x1
l2 = GaussLogLik(x[2], m = 1, s = 1) # find likelihood of x2
l3 = BernoulliLogLik(x[3], p = 0.6) # find likelihood of x3
ll = l1 + l2 + l3 # find log(p(x|A))
return(ll)
}
# function LogLikB
# formula: log(p(x|B)) = sum(log(p(xi|B)))
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# ll -- log likelihood that the vector came from set B
logLikB = function(x) {
l1 = GaussLogLik(x[1], m = 1, s = 1) # find likelihood of x1
l2 = GaussLogLik(x[2], m = 7, s = 4) # find likelihood of x2
l3 = BernoulliLogLik(x[3], p = 0.8) # find likelihood of x3
ll = l1 + l2 + l3 # find log(p(x|B))
return(ll)
}
# function LogLikC
# formula: log(p(x|C)) = sum(log(p(xi|C)))
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# ll -- log likelihood that the vector came from set C
logLikC = function(x) {
l1 = GaussLogLik(x[1], m = 1, s = 1) # find likelihood of x1
l2 = GaussLogLik(x[2], m = 1, s = 1) # find likelihood of x2
l3 = BernoulliLogLik(x[3], p = 0.2) # find likelihood of x3
ll = l1 + l2 + l3 # find log(p(x|C))
return(ll)
}
x = c(7.2, 1, 1) # example of x
llA = logLikA(x) # find log likelihood that x came from set A
llB = logLikB(x) # find log likelihood that x came from set B
llC = logLikC(x) # find log likelihood that x came from set C
print(paste0("Log Likelihoods of x = [", x[1], " ", x[2], " ", x[3], "] coming from set A, B, C = [", llA, " ", llB, " ", llC, "]"))
print(paste0("Log Likelihoods of x = [", x[1], " ", x[2], " ", x[3], "] coming from set A, B, C = [", round(llA,2), " ", round(llB,2), " ", round(llC,2), "]"))
print(paste0("Log Likelihoods of x = [7.2 1.0 1] coming from set A, B, C = [", round(llA,2), " ", round(llB,2), " ", round(llC,2), "]"))
# function ClassProbability(x)
# formula: Baye's Rule -- p(A|x) = p(x|A) * p(A) / p(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
# calculate p(x) for Baye's formula, assuming p(x|A) + p(x|B) + p(x|C) = p(x)
px = exp(llA) + exp(llB) + exp(llC)
# calculate p(Set|x) using Baye's formula
pSet = 1/3 # assuming p(A) == p(B) == (pC)
pA_x = exp(llA) * pSet / px
pB_x = exp(llB) * pSet / px
pC_x = exp(llC) * pSet / px
return(c(pA_x, pB_x, pC_x))
}
ClassProbability(x)
# calculate class probabilities for x = [5.0 5.0 1]
ClassProbability(c(5,5,1))
round(ClassProbability(c(5,5,1)),2)
logLikA(x)
logLikB(x)
logLikC(x)
x
exp(-3.73) / (1 + exp(-3.73))
# function ClassProbability(x)
# formula: Baye's Rule -- p(A|x) = p(x|A) * p(A) / p(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
# calculate p(x) for Baye's formula, assuming p(x|A) + p(x|B) + p(x|C) = p(x)
px = exp(llA) + exp(llB) + exp(llC)
# calculate p(Set|x) using Baye's formula
pSet = 1/3 # assuming p(A) == p(B) == (pC)
pA_x = exp(llA) * pSet / px
pB_x = exp(llB) * pSet / px
pC_x = exp(llC) * pSet / px
sumLL = llA + llB + llC
pA_x = llA / sumLL
pB_x = llB / sumLL
pC_x = llC / sumLL
return(c(pA_x, pB_x, pC_x))
}
ClassProbability(x)
ClassProbability(c(5,5,1))
# function ClassProbability(x)
# formula: Baye's Rule -- p(A|x) = p(x|A) * p(A) / p(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
# calculate p(x) for Baye's formula, assuming p(x|A) + p(x|B) + p(x|C) = p(x)
px = exp(llA) + exp(llB) + exp(llC)
# calculate p(Set|x) using Baye's formula
pSet = 1/3 # assuming p(A) == p(B) == (pC)
pA_x = exp(llA) * pSet / px
pB_x = exp(llB) * pSet / px
pC_x = exp(llC) * pSet / px
sumLL = llA + llB + llC
pA_x = 1 - llA / sumLL
pB_x = 1 - llB / sumLL
pC_x = 1 - llC / sumLL
return(c(pA_x, pB_x, pC_x))
}
ClassProbability(x)
# function ClassProbability(x)
# formula: Baye's Rule -- p(A|x) = p(x|A) * p(A) / p(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
# calculate p(x) for Baye's formula, assuming p(x|A) + p(x|B) + p(x|C) = p(x)
px = exp(llA) + exp(llB) + exp(llC)
# calculate p(Set|x) using Baye's formula
pSet = 1/3 # assuming p(A) == p(B) == (pC)
pA_x = exp(llA) * pSet / px
pB_x = exp(llB) * pSet / px
pC_x = exp(llC) * pSet / px
sumLL = llA + llB + llC
pA_x = llA / sumLL
pB_x = llB / sumLL
pC_x = llC / sumLL
return(c(pA_x, pB_x, pC_x))
}
ClassProbability(c(5,5,0))
ClassProbability(c(5,5,1))
logLikA(c(5,5,0))
logLikB(c(5,5,0))
logLikC(c(5,5,0))
logLikA(c(5,5,1))
logLikB(c(5,5,1))
logLikC(c(5,5,1))
ClassProbability(c(5,5,1))
0.27 + 0.27 + 0.45
exp(logLikA(x))
# function ClassProbability(x)
# formula: Baye's Rule -- p(A|x) = p(x|A) * p(A) / p(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
# calculate p(x) for Baye's formula, assuming p(x|A) + p(x|B) + p(x|C) = p(x)
px = exp(llA) + exp(llB) + exp(llC)
# calculate p(Set|x) using Baye's formula
pSet = 1/3 # assuming p(A) == p(B) == (pC)
pA_x = exp(llA) * pSet / px
pB_x = exp(llB) * pSet / px
pC_x = exp(llC) * pSet / px
sumLL = exp(llA) + exp(llB) + exp(llC)
pA_x = exp(llA) / sumLL
pB_x = exp(llB) / sumLL
pC_x = exp(llC) / sumLL
return(c(pA_x, pB_x, pC_x))
}
ClassProbability(x)
ClassProbability(c(5,5,0))
# calculate class probabilities for x = [5.0 5.0 1]
ClassProbability(c(5,5,1))
# function ClassProbability(x)
# inputs:
# x -- vector of x1, x2, x3
# outputs:
# p -- probability of x coming from set A, set B, set C
ClassProbability = function(x) {
# calculate log likelihoods for each set
llA = logLikA(x)
llB = logLikB(x)
llC = logLikC(x)
sumLL = exp(llA) + exp(llB) + exp(llC) # since we know x is from A B or C, we can normalize
pA_x = exp(llA) / sumLL # divide p(x|A) by sum
pB_x = exp(llB) / sumLL # divide p(x|B) by sum
pC_x = exp(llC) / sumLL # divide p(x|C) by sum
return(c(pA_x, pB_x, pC_x))
}
# calculate class probabilities for x = [5.0 5.0 1]
ClassProbability(c(5,5,1))
0.57 + 0.42
install.packages("devtools")
library(devtools)
library(bmi585hmumme)
devtools::install_github("hmumme/bmi585hmumme")
library(bmi585hmumme)
?chiSquareCounts
devtools::install_github("hmumme/bmi585hmumme")
devtools::install_github("hmumme/bmi585hmumme")
library(bmi585hmumme)
?chiSquareCounts
?accuracy
devtools::install_github("hmumme/bmi585hmumme")
bmi585hmumme
library(bmi585hmumme)
install.packages("pbkrtest")
library(KMsurv)
install.packages("KMsurv")
knitr::opts_chunk$set(echo = TRUE)
library(KMsurv)
install.packages("survMisc")
knitr::opts_chunk$set(echo = TRUE)
library(KMsurv)
library(survMisc)
data("bmt", package="KMsurv")
bmt
data("bmt", package="KMsurv")
head(bmt)
b1 <- bmt[bmt$group==1, ] # ALL patients
b1
c1 <- coxph(Surv(t2, d3) ~ z1, data=b1) # z1=age
c1
?Surv
c1 <- cutp(c1)$z1
c1
data("bmt", package="KMsurv")
head(bmt)
b1 <- bmt[bmt$group==1, ] # ALL patients
c1 <- coxph(Surv(t2, d3) ~ z1, data=b1) # z1=age
c1 <- cutp(c1)$z1
data.table::setorder(c1, "z1")
data("bmt", package="KMsurv")
head(bmt)
b1 <- bmt[bmt$group==1, ] # ALL patients
c1 <- coxph(Surv(t2, d3) ~ z1, data=b1) # z1=age
c1 <- cutp(c1)$z1
data.table::setorder(c1, "z1")
c1[]
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(SeuratDisk)
library(Seurat)
library(SeuratDisk)
install.packages(SeuratDisk)
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
install.packages(SeuratWrappers)
remotes::install_github('satijalab/seurat-wrappers')
install.packages("R.utils")
remotes::install_github('satijalab/seurat-wrappers')
library(SeuratWrappers)
library(patchwork)
library(harmony)
library(rliger)
library(reshape2)
library(RColorBrewer)
library(dplyr)
source("utils/custom_seurat_functions.R")
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(patchwork)
library(harmony)
library(rliger)
library(reshape2)
library(RColorBrewer)
library(dplyr)
source("utils/custom_seurat_functions.R")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(patchwork)
library(harmony)
library(rliger)
library(reshape2)
library(RColorBrewer)
library(dplyr)
library(hdf5r)
library(ggplot2)
library(gridExtra)
source("utils/custom_seurat_functions.R")
download.file("https://cf.10xgenomics.com/samples/cell-exp/4.0.0/Parent_NGSC3_DI_PBMC/Parent_NGSC3_DI_PBMC_filtered_feature_bc_matrix.h5",
destfile = "data/3p_pbmc10k_filt.h5")
download.file("https://cf.10xgenomics.com/samples/cell-vdj/5.0.0/sc5p_v2_hs_PBMC_10k/sc5p_v2_hs_PBMC_10k_filtered_feature_bc_matrix.h5",
destfile = "data/5p_pbmc10k_filt.h5")
matrix_3p <- Read10X_h5("data/Parent_NGSC3_DI_PBMC_filtered_feature_bc_matrix.h5",use.names = T)
matrix_5p <- Read10X_h5("data/sc5p_v2_hs_PBMC_10k_filtered_feature_bc_matrix.h5")$`Gene Expression`
srat_3p   <- CreateSeuratObject(matrix_3p,project = "pbmc10k_3p")
srat_5p   <- CreateSeuratObject(matrix_5p,project = "pbmc10k_5p")
rm(matrix_3p)
rm(matrix_5p)
srat_3p[["percent.mt"]]  <- PercentageFeatureSet(srat_3p, pattern = "^MT-")
srat_3p[["percent.rbp"]] <- PercentageFeatureSet(srat_3p, pattern = "^RP[SL]")
srat_5p[["percent.mt"]]  <- PercentageFeatureSet(srat_5p, pattern = "^MT-")
srat_5p[["percent.rbp"]] <- PercentageFeatureSet(srat_5p, pattern = "^RP[SL]")
VlnPlot(srat_3p, features = c("nFeature_RNA","nCount_RNA","percent.mt","percent.rbp"), ncol = 4)
VlnPlot(srat_5p, features = c("nFeature_RNA","nCount_RNA","percent.mt","percent.rbp"), ncol = 4)
srat_3p <- subset(srat_3p, subset = nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt < 15)
srat_5p <- subset(srat_5p, subset = nFeature_RNA > 500 & nFeature_RNA < 5000 & percent.mt < 10)
pbmc_list <- list()
pbmc_list[["pbmc10k_3p"]] <- srat_3p
pbmc_list[["pbmc10k_5p"]] <- srat_5p
for (i in 1:length(pbmc_list)) {
pbmc_list[[i]] <- NormalizeData(pbmc_list[[i]], verbose = F)
pbmc_list[[i]] <- FindVariableFeatures(pbmc_list[[i]], selection.method = "vst", nfeatures = 2000, verbose = F)
}
pbmc_anchors    <- FindIntegrationAnchors(object.list = pbmc_list, dims = 1:30)
pbmc_anchors
ls()
pbmc_anchors    <- FindIntegrationAnchors(object.list = pbmc_list, dims = 1:30)
gc()
pbmc_seurat     <- IntegrateData(anchorset = pbmc_anchors, dims = 1:30)
rm(pbmc_list)
rm(pbmc_anchors)
DefaultAssay(pbmc_seurat) <- "RNA"
pbmc_seurat <- NormalizeData(pbmc_seurat, verbose = F)
pbmc_seurat <- FindVariableFeatures(pbmc_seurat, selection.method = "vst", nfeatures = 2000, verbose = F)
pbmc_seurat <- ScaleData(pbmc_seurat, verbose = F)
pbmc_seurat <- RunPCA(pbmc_seurat, npcs = 30, verbose = F)
pbmc_seurat <- RunUMAP(pbmc_seurat, reduction = "pca", dims = 1:30, verbose = F)
pS_B = DimPlot(pbmc_seurat,reduction = "umap",group.by = "orig.ident") + ggtitle("10k 3' PBMC and 10k 5' PBMC cells, before integration")
pS_B
DefaultAssay(pbmc_seurat) <- "integrated"
pbmc_seurat <- ScaleData(pbmc_seurat, verbose = F)
pbmc_seurat <- RunPCA(pbmc_seurat, npcs = 30, verbose = F)
pbmc_seurat <- RunUMAP(pbmc_seurat, reduction = "pca", dims = 1:30, verbose = F)
pbmc_seurat <- FindNeighbors(pbmc_seurat, dims = 1:30, k.param = 10, verbose = F)
pbmc_seurat <- FindClusters(pbmc_seurat, verbose = F)
pS_I = DimPlot(pbmc_seurat, reduction = "umap",group.by = "orig.ident") + ggtitle("10k 3' PBMC and 10k 5' PBMC cells, after integration (Seurat 3)")
pS_I
DimPlot(pbmc_seurat,label = T, split.by = "orig.ident") + NoLegend() + ggtitle("Seurat Integrated Matrix Clusters")
pS = plot_integrated_clusters(pbmc_seurat) + ggtitle("Distribution of Datasets in Seurat Integrated Matrix Clusters")
pS
pbmc_harmony <- merge(srat_3p,srat_5p)
pbmc_harmony <- NormalizeData(pbmc_harmony, verbose = F)
pbmc_harmony <- FindVariableFeatures(pbmc_harmony, selection.method = "vst", nfeatures = 2000, verbose = F)
pbmc_harmony <- ScaleData(pbmc_harmony, verbose = F)
pbmc_harmony <- RunPCA(pbmc_harmony, npcs = 30, verbose = F)
pbmc_harmony <- RunUMAP(pbmc_harmony, reduction = "pca", dims = 1:30, verbose = F)
(pbmc_seurat@meta.data, orig.ident, res.0.8)
# Seurat ARI
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, res.0.8)
pbmc_seurat
colnames(pbmc_seurat)
colnames(pbmc_seurat@meta.data)
# Seurat ARI
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS
table(pbmc_seurat$orig.ident)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$res.0.8))
library(pdfCluster)
install.packages("pdfCluster")
library(pdfCluster)
adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$res.0.8))
adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8))
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("SEURAT ARI=")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
pHL_B = DimPlot(pbmc_harmony,reduction = "umap", group.by="orig.ident") + plot_annotation(title = "10k 3' PBMC and 10k 5' PBMC cells, before integration")
pHL_B
pbmc_harmony <- merge(srat_3p,srat_5p)
pbmc_harmony <- NormalizeData(pbmc_harmony, verbose = F)
pbmc_harmony <- FindVariableFeatures(pbmc_harmony, selection.method = "vst", nfeatures = 2000, verbose = F)
pbmc_harmony <- ScaleData(pbmc_harmony, verbose = F)
pbmc_harmony <- RunPCA(pbmc_harmony, npcs = 30, verbose = F)
pbmc_harmony <- RunUMAP(pbmc_harmony, reduction = "pca", dims = 1:30, verbose = F)
pHL_B = DimPlot(pbmc_harmony,reduction = "umap", group.by="orig.ident") + plot_annotation(title = "10k 3' PBMC and 10k 5' PBMC cells, before integration")
pHL_B
pbmc_harmony <- pbmc_harmony %>% RunHarmony("orig.ident", plot_convergence = T)
p1 <- DimPlot(object = pbmc_harmony, reduction = "harmony", pt.size = .1, group.by = "orig.ident") + NoLegend()
p2 <- VlnPlot(object = pbmc_harmony, features = "harmony_1", group.by = "orig.ident", pt.size = .1) + NoLegend()
plot_grid(p1,p2)
pbmc_harmony <- pbmc_harmony %>%
RunUMAP(reduction = "harmony", dims = 1:30, verbose = F) %>%
FindNeighbors(reduction = "harmony", k.param = 10, dims = 1:30) %>%
FindClusters() %>%
identity()
pbmc_harmony <- SetIdent(pbmc_harmony,value = "orig.ident")
pH_I = DimPlot(pbmc_harmony,reduction = "umap",group.by="orig.ident") + plot_annotation(title = "10k 3' PBMC and 10k 5' PBMC cells, after integration (Harmony)")
pH_I
pH_I
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("SEURAT ARI =")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("---------------")
# Harmony ARI
ariH <- dplyr::select(pbmc_harmony@meta.data, orig.ident, integrated_snn_res.0.8)
colnames(pbmc_harmony@meta.data)
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("SEURAT ARI =")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("---------------")
# Harmony ARI
ariH <- dplyr::select(pbmc_harmony@meta.data, orig.ident, RNA_snn_res.0.8)
ariH$orig.ident <- plyr::mapvalues(ariH$orig.ident, from = c(""), to = c(0, 1))
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("SEURAT ARI =")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("---------------")
# Harmony ARI
ariH <- dplyr::select(pbmc_harmony@meta.data, orig.ident, RNA_snn_res.0.8)
ariH$orig.ident <- plyr::mapvalues(ariH$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("HARMONY ARI =")
print(adj.rand.index(as.numeric(ariH$orig.ident), as.numeric(ariH$integrated_snn_res.0.8)))
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("SEURAT ARI =")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("---------------")
# Harmony ARI
ariH <- dplyr::select(pbmc_harmony@meta.data, orig.ident, RNA_snn_res.0.8)
ariH$orig.ident <- plyr::mapvalues(ariH$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("HARMONY ARI =")
print(adj.rand.index(as.numeric(ariH$orig.ident), as.numeric(ariH$RNA_snn_res.0.8)))
print("---------------")
pbmc_liger <- merge(srat_3p,srat_5p)
pbmc_liger  <- NormalizeData(pbmc_liger)
pbmc_liger  <- FindVariableFeatures(pbmc_liger)
pbmc_liger  <- ScaleData(pbmc_liger, split.by = "orig.ident", do.center = F)
pbmc_liger  <- RunOptimizeALS(pbmc_liger, k = 30, lambda = 5, split.by = "orig.ident") ## this one takes a while
pbmc_liger  <- RunQuantileNorm(pbmc_liger, split.by = "orig.ident")
pbmc_liger  <- FindNeighbors(pbmc_liger,reduction = "iNMF",k.param = 10,dims = 1:30)
pbmc_liger  <- FindClusters(pbmc_liger)
pbmc_liger  <- RunUMAP(pbmc_liger, dims = 1:ncol(pbmc_liger[["iNMF"]]), reduction = "iNMF", verbose = F)
pbmc_liger  <- SetIdent(pbmc_liger,value = "orig.ident")
pL_I = DimPlot(pbmc_liger,reduction = "umap") + plot_annotation(title = "10k 3' PBMC and 10k 5' PBMC cells, after integration (LIGER)")
pL_I
pbmc_liger <- SetIdent(pbmc_liger,value = "seurat_clusters")
DimPlot(pbmc_liger,reduction = "umap",label = T, split.by = "orig.ident") + NoLegend()
pL = plot_integrated_clusters(pbmc_liger)
pL
grid.arrange(pS_B,pS_I, top = "SEURAT")
grid.arrange(pHL_B,pH_I, top = "HARMONY")
grid.arrange(pHL_B,pL_I, top = "LIGER")
# Seurat ARI
ariS <- dplyr::select(pbmc_seurat@meta.data, orig.ident, integrated_snn_res.0.8)
ariS$orig.ident <- plyr::mapvalues(ariS$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("SEURAT ARI =")
print(adj.rand.index(as.numeric(ariS$orig.ident), as.numeric(ariS$integrated_snn_res.0.8)))
print("---------------")
# Harmony ARI
ariH <- dplyr::select(pbmc_harmony@meta.data, orig.ident, RNA_snn_res.0.8)
ariH$orig.ident <- plyr::mapvalues(ariH$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("HARMONY ARI =")
print(adj.rand.index(as.numeric(ariH$orig.ident), as.numeric(ariH$RNA_snn_res.0.8)))
print("---------------")
# LIGER ARI
ariL <- dplyr::select(pbmc_liger@meta.data, orig.ident, RNA_snn_res.0.8)
ariL$orig.ident <- plyr::mapvalues(ariL$orig.ident, from = c("pbmc10k_3p","pbmc10k_5p"), to = c(0, 1))
print("LIGER ARI =")
print(adj.rand.index(as.numeric(ariL$orig.ident), as.numeric(ariL$RNA_snn_res.0.8)))
setwd("C:/Users/hopem/OneDrive/Desktop/Bhasin Lab/scToolbox")
devtools::document()
